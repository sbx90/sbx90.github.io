import { Globe } from "./classes";
import { rectIntersect } from "./collision";

class GameObject {
  context;
  x;
  y;
  vx;
  vy;
  isColliding;

  constructor(
    context: CanvasRenderingContext2D,
    x: number,
    y: number,
    vx: number,
    vy: number
  ) {
    this.context = context;
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;

    this.isColliding = false;
  }
}
const g = 9.81;

export function init(canvas: HTMLCanvasElement) {
  const context = canvas.getContext("2d");

  if (!context) return -1;

  let secondsPassed = 0;
  let oldTimeStamp = 0;
  let fps = 0;

  let timePassed = 0;

  const globe = new Globe();

  const create = () => {};

  const detectCollisions = () => {
    let obj1;
    let obj2;

    // Reset collision state of all objects
    for (let i = 0; i < gameObjects.length; i++) {
      gameObjects[i].isColliding = false;
    }

    // Start checking for collisions
    for (let i = 0; i < gameObjects.length; i++) {
      obj1 = gameObjects[i];
      for (let j = i + 1; j < gameObjects.length; j++) {
        obj2 = gameObjects[j];

        // Compare object1 with object2
        if (
          rectIntersect(
            obj1.x,
            obj1.y,
            obj1.width,
            obj1.height,
            obj2.x,
            obj2.y,
            obj2.width,
            obj2.height
          )
        ) {
          obj1.isColliding = true;
          obj2.isColliding = true;

          let vCollision = { x: obj2.x - obj1.x, y: obj2.y - obj1.y };
          let distance = Math.sqrt(
            (obj2.x - obj1.x) * (obj2.x - obj1.x) +
              (obj2.y - obj1.y) * (obj2.y - obj1.y)
          );
          let vCollisionNorm = {
            x: vCollision.x / distance,
            y: vCollision.y / distance,
          };
          let vRelativeVelocity = {
            x: obj1.vx - obj2.vx,
            y: obj1.vy - obj2.vy,
          };
          let speed =
            vRelativeVelocity.x * vCollisionNorm.x +
            vRelativeVelocity.y * vCollisionNorm.y;

          if (speed < 0) {
            break;
          }

          obj1.vx -= speed * vCollisionNorm.x;
          obj1.vy -= speed * vCollisionNorm.y;
          obj2.vx += speed * vCollisionNorm.x;
          obj2.vy += speed * vCollisionNorm.y;

          // let impulse = (2 * speed) / (obj1.mass + obj2.mass);
          // obj1.vx -= impulse * obj2.mass * vCollisionNorm.x;
          // obj1.vy -= impulse * obj2.mass * vCollisionNorm.y;
          // obj2.vx += impulse * obj1.mass * vCollisionNorm.x;
          // obj2.vy += impulse * obj1.mass * vCollisionNorm.y;
        }
      }
    }
  };

  const update = () => {
    timePassed += secondsPassed;

    for (let i = 0; i < gameObjects.length; i++) {
      gameObjects[i].update(secondsPassed);
    }

    detectCollisions();
  };

  const draw = () => {
    context.clearRect(0, 0, canvas.width, canvas.height);

    for (let i = 0; i < gameObjects.length; i++) {
      gameObjects[i].draw();
    }
  };

  const mainLoop = (timeStamp = 0) => {
    update();
    draw();

    // Calculate the number of seconds passed since the last frame
    secondsPassed = (timeStamp - oldTimeStamp) / 1000;
    secondsPassed = Math.min(secondsPassed, 0.1);
    oldTimeStamp = timeStamp;

    // Calculate fps
    fps = Math.round(1 / secondsPassed);

    // Draw number to the screen
    context.font = "25px Arial";
    context.fillStyle = "black";
    context.fillText("FPS: " + fps, 10, 30);

    window.requestAnimationFrame(mainLoop);
  };

  create();
  mainLoop();
}
